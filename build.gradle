import se.solrike.sonarlint.SonarlintListRules

plugins {
  id 'eclipse'
  id 'groovy'
  // Apply the Plugin Publish Plugin to make plugin publication possible
  id 'com.gradle.plugin-publish' version '1.2.1'
  id 'se.solrike.conventions.java-conventions' version '1.0.0-beta.7'
}

repositories {
  mavenCentral()
}

dependencies {
  implementation('io.github.furstenheim:copy_down:1.1')
  implementation('org.apache.commons:commons-text:1.10.0')
  implementation('org.sonarsource.sonarlint.core:sonarlint-core:9.8.0.76914') // 9.6.1.76766 // 9.8.0.76914 //10.4.1.78855

  testImplementation('org.mockito:mockito-core:3.7.7')
  testImplementation('org.mockito:mockito-junit-jupiter:3.7.7')

  testImplementation('org.assertj:assertj-core:3.22.0')
  testImplementation('org.junit.jupiter:junit-jupiter')
  testImplementation(platform('org.junit:junit-bom:5.8.2'))
}

group = 'se.solrike.sonarlint'
version = '2.2.0'

sourceSets {
  main {
    java {
      srcDirs = [] // don't compile Java code twice
    }
    groovy {
      srcDirs = [
        'src/main/groovy',
        'src/main/java'
      ]
    }
  }
}

javadoc {
  enabled = false
}
groovydoc {
  enabled = false
}

sonarlintMain {
  reports {
    html.enabled = true
    sarif.enabled = true
  }
  ignoreFailures = false
}
sonarlintTest {
  reports {
    sarif.enabled = true
  }
  ignoreFailures = false
}

spotbugsMain {
  ignoreFailures = true
}
spotbugsTest {
  enabled = false
}


// publish the plugin like: ./gradlew publishPlugins
gradlePlugin {
  plugins {
    sonarlintPlugin {
      id = group
      implementationClass = 'se.solrike.sonarlint.SonarlintPlugin'
      displayName = 'Sonarlint plugin'
      description = 'Sonarlint static code analysis using stand-alone Sonarlint engine, for ' +
          'Java, Kotlin, Scala and Node.js projects. But other languages are also possible to lint like Ruby and Golang.\n' +
          'It is possible to include and exclude rules and also list the rules in the Sonarlist plugins you depend on.\n' +
          'If the plugin is configured with an incopatible Sonarlint plugin the build will fail.\n' +
          'The plugin supports Gradle configuration cache.\n' +
          'The plugin can produce Spotbugs compatible XML reports and also SARIF which can be used by Github actions, Jenkins, ' +
          'AWS CodeCatalyst and Azure DevOps.\n' +
          'Min Gradle version 7.5.'
    }
  }
}

pluginBundle {
  // These settings are set for the whole plugin bundle
  website = 'https://github.com/Lucas3oo/sonarlint-gradle-plugin'
  vcsUrl = website
  pluginTags = [
    sonarlintPlugin: [
      'code analysis',
      'code quality',
      'codesmells',
      'java',
      'kotlin',
      'lint',
      'node',
      'sarif',
      'scala',
      'software composition analysis',
      'sonarlint',
      'spotbugs',
      'static analysis',
      'static code analysis'
    ]
  ]
}

// to upgrade the metainfo about which gradle version we shall use. Run ./gradlew wrapper after you have updated the version. The commit the new wrapper files except the gradlew.bat
wrapper {
  gradleVersion = '7.5'
}


tasks.register('sonarlintListRules', SonarlintListRules) {
  description = 'List sonarlint rules'
  group = 'verification'
}

// ./gradlew clean test --tests 'KotlinIntegrationTest.testSonarlintMain'